/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package imartagent;

import javax.swing.*;
import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.lang.instrument.Instrumentation;
import java.security.ProtectionDomain;

public class Agent {
    private static byte[] utilbyte;
    private static byte[] runnablebyte;
    private static Thread service;

    public static byte[] convertStreamToByteArray(InputStream is) throws IOException {

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        int nRead;
        byte[] data = new byte[1024];
        while ((nRead = is.read(data, 0, data.length)) != -1) {
            buffer.write(data, 0, nRead);
        }

        buffer.flush();
        return buffer.toByteArray();
    }

    public static void premain(String args, Instrumentation inst) {
        System.setProperty("java.awt.headless", "false");
        Toolkit kit = Toolkit.getDefaultToolkit();
        System.out.println(kit.toString());
        try {
            utilbyte = convertStreamToByteArray(Agent.class.getResourceAsStream("/yao/DebugUtil.class"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            runnablebyte = convertStreamToByteArray(Agent.class.getResourceAsStream("/yao/StartAction.class"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        inst.addTransformer(new ClassFileTransformer() {

            private boolean loaded = false;
            private DebuggerLoader debuggerLoader;

            @Override
            public byte[] transform(final ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
                if (loaded == false && className.startsWith("jp/co/intra_mart/system/session/ScriptContextFactory")) {
                    service = new Thread(new Runnable() {

                        @Override
                        public void run() {
                            try {
                                //Delay to wait imart initialize
                                Thread.sleep(20000);
                                System.err.println("== TRY To Enable Debugger ==");
                                debuggerLoader = new DebuggerLoader(loader, utilbyte, runnablebyte);
                                Class.forName("yao.DebugUtil", true, debuggerLoader);

                                System.err.println("== SUCCESS ==");
                            } catch (ClassNotFoundException e) {
                                //ignore
                                System.err.println("== ERROR ==");
                                System.err.println(loader.toString());
                            } catch (Throwable t) {
                                t.printStackTrace();
                            }
                        }
                    });
                    service.start();
                    loaded = true;
                }
                return classfileBuffer;
            }
        });
    }
}
